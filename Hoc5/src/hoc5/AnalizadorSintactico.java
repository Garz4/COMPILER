
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

package hoc5;

import java_cup.runtime.*;
import java.io.FileReader;
import java.lang.Math;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return AnalizadorSintacticoSym.class;
}

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\002\000\002\002\004\000\002\002" +
    "\004\000\002\003\005\000\002\005\004\000\002\005\005" +
    "\000\002\005\006\000\002\005\006\000\002\005\011\000" +
    "\002\005\005\000\002\012\005\000\002\010\003\000\002" +
    "\007\003\000\002\011\002\000\002\006\003\000\002\006" +
    "\004\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\006\000\002\004\004\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\016\002\001\015\001\016\001\017\001\022" +
    "\001\037\001\001\002\000\016\002\013\015\016\016\007" +
    "\017\015\022\014\037\006\001\002\000\004\012\074\001" +
    "\002\000\014\015\016\016\007\017\015\022\014\037\006" +
    "\001\002\000\004\012\ufff6\001\002\000\004\014\102\001" +
    "\002\000\016\002\uffff\015\uffff\016\uffff\017\uffff\022\uffff" +
    "\037\uffff\001\002\000\004\012\074\001\002\000\004\002" +
    "\000\001\002\000\004\010\071\001\002\000\004\012\ufff5" +
    "\001\002\000\020\005\021\012\027\021\017\022\023\023" +
    "\022\024\026\036\025\001\002\000\040\004\ufff1\005\ufff1" +
    "\006\ufff1\007\ufff1\011\ufff1\013\ufff1\014\ufff1\026\ufff1\027" +
    "\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1" +
    "\001\002\000\040\004\uffee\005\uffee\006\uffee\007\uffee\011" +
    "\uffee\013\uffee\014\uffee\026\uffee\027\uffee\030\uffee\031\uffee" +
    "\032\uffee\033\uffee\034\uffee\035\uffee\001\002\000\020\005" +
    "\021\012\027\021\017\022\023\023\022\024\026\036\025" +
    "\001\002\000\040\004\uffef\005\uffef\006\uffef\007\uffef\011" +
    "\uffef\013\uffef\014\uffef\026\uffef\027\uffef\030\uffef\031\uffef" +
    "\032\uffef\033\uffef\034\uffef\035\uffef\001\002\000\042\004" +
    "\ufff0\005\ufff0\006\ufff0\007\ufff0\010\071\011\ufff0\013\ufff0" +
    "\014\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033" +
    "\ufff0\034\ufff0\035\ufff0\001\002\000\036\004\034\005\035" +
    "\006\041\007\031\011\037\014\070\026\046\027\032\030" +
    "\043\031\036\032\045\033\042\034\040\035\044\001\002" +
    "\000\020\005\021\012\027\021\017\022\023\023\022\024" +
    "\026\036\025\001\002\000\004\012\064\001\002\000\020" +
    "\005\021\012\027\021\017\022\023\023\022\024\026\036" +
    "\025\001\002\000\036\004\034\005\035\006\041\007\031" +
    "\011\037\013\033\026\046\027\032\030\043\031\036\032" +
    "\045\033\042\034\040\035\044\001\002\000\020\005\021" +
    "\012\027\021\017\022\023\023\022\024\026\036\025\001" +
    "\002\000\020\005\021\012\027\021\017\022\023\023\022" +
    "\024\026\036\025\001\002\000\040\004\uffe9\005\uffe9\006" +
    "\uffe9\007\uffe9\011\uffe9\013\uffe9\014\uffe9\026\uffe9\027\uffe9" +
    "\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\001" +
    "\002\000\020\005\021\012\027\021\017\022\023\023\022" +
    "\024\026\036\025\001\002\000\020\005\021\012\027\021" +
    "\017\022\023\023\022\024\026\036\025\001\002\000\020" +
    "\005\021\012\027\021\017\022\023\023\022\024\026\036" +
    "\025\001\002\000\020\005\021\012\027\021\017\022\023" +
    "\023\022\024\026\036\025\001\002\000\020\005\021\012" +
    "\027\021\017\022\023\023\022\024\026\036\025\001\002" +
    "\000\020\005\021\012\027\021\017\022\023\023\022\024" +
    "\026\036\025\001\002\000\020\005\021\012\027\021\017" +
    "\022\023\023\022\024\026\036\025\001\002\000\020\005" +
    "\021\012\027\021\017\022\023\023\022\024\026\036\025" +
    "\001\002\000\020\005\021\012\027\021\017\022\023\023" +
    "\022\024\026\036\025\001\002\000\020\005\021\012\027" +
    "\021\017\022\023\023\022\024\026\036\025\001\002\000" +
    "\020\005\021\012\027\021\017\022\023\023\022\024\026" +
    "\036\025\001\002\000\040\004\034\005\035\006\041\007" +
    "\031\011\037\013\uffde\014\uffde\026\uffde\027\032\030\043" +
    "\031\036\032\045\033\042\034\040\035\044\001\002\000" +
    "\040\004\034\005\035\006\041\007\031\011\037\013\uffe3" +
    "\014\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033" +
    "\uffe3\034\uffe3\035\uffe3\001\002\000\040\004\034\005\035" +
    "\006\041\007\031\011\037\013\uffe0\014\uffe0\026\uffe0\027" +
    "\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0" +
    "\001\002\000\040\004\034\005\035\006\041\007\031\011" +
    "\037\013\uffe5\014\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5" +
    "\032\uffe5\033\uffe5\034\uffe5\035\uffe5\001\002\000\040\004" +
    "\034\005\035\006\041\007\031\011\037\013\uffe2\014\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034" +
    "\uffe2\035\uffe2\001\002\000\040\004\uffeb\005\uffeb\006\uffeb" +
    "\007\uffeb\011\037\013\uffeb\014\uffeb\026\uffeb\027\uffeb\030" +
    "\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\001\002" +
    "\000\040\004\034\005\035\006\041\007\031\011\037\013" +
    "\uffe1\014\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1" +
    "\033\uffe1\034\uffe1\035\uffe1\001\002\000\040\004\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\011\uffe6\013\uffe6\014\uffe6\026\uffe6" +
    "\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\001\002\000\040\004\034\005\035\006\041\007\031" +
    "\011\037\013\uffe4\014\uffe4\026\uffe4\027\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\001\002\000\040" +
    "\004\uffec\005\uffec\006\041\007\031\011\037\013\uffec\014" +
    "\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec" +
    "\034\uffec\035\uffec\001\002\000\040\004\uffed\005\uffed\006" +
    "\041\007\031\011\037\013\uffed\014\uffed\026\uffed\027\uffed" +
    "\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\001" +
    "\002\000\040\004\034\005\035\006\041\007\031\011\037" +
    "\013\uffdf\014\uffdf\026\uffdf\027\uffdf\030\043\031\036\032" +
    "\045\033\042\034\040\035\044\001\002\000\040\004\uffea" +
    "\005\uffea\006\uffea\007\uffea\011\037\013\uffea\014\uffea\026" +
    "\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea" +
    "\035\uffea\001\002\000\020\005\021\012\027\021\017\022" +
    "\023\023\022\024\026\036\025\001\002\000\036\004\034" +
    "\005\035\006\041\007\031\011\037\013\066\026\046\027" +
    "\032\030\043\031\036\032\045\033\042\034\040\035\044" +
    "\001\002\000\040\004\uffe8\005\uffe8\006\uffe8\007\uffe8\011" +
    "\uffe8\013\uffe8\014\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8" +
    "\032\uffe8\033\uffe8\034\uffe8\035\uffe8\001\002\000\040\004" +
    "\034\005\035\006\041\007\031\011\037\013\uffdd\014\uffdd" +
    "\026\046\027\032\030\043\031\036\032\045\033\042\034" +
    "\040\035\044\001\002\000\022\002\ufffc\015\ufffc\016\ufffc" +
    "\017\ufffc\020\ufffc\022\ufffc\037\ufffc\040\ufffc\001\002\000" +
    "\020\005\021\012\027\021\017\022\023\023\022\024\026" +
    "\036\025\001\002\000\040\004\034\005\035\006\041\007" +
    "\031\011\037\013\ufffe\014\ufffe\026\046\027\032\030\043" +
    "\031\036\032\045\033\042\034\040\035\044\001\002\000" +
    "\040\004\uffe7\005\uffe7\006\uffe7\007\uffe7\011\uffe7\013\uffe7" +
    "\014\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033" +
    "\uffe7\034\uffe7\035\uffe7\001\002\000\020\005\021\012\027" +
    "\021\017\022\023\023\022\024\026\036\025\001\002\000" +
    "\014\015\016\016\007\017\015\022\014\037\006\001\002" +
    "\000\022\002\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\022" +
    "\ufff4\037\ufff4\040\ufff4\001\002\000\022\002\ufffb\015\ufffb" +
    "\016\ufffb\017\ufffb\020\ufffb\022\ufffb\037\ufffb\040\ufffb\001" +
    "\002\000\036\004\034\005\035\006\041\007\031\011\037" +
    "\013\101\026\046\027\032\030\043\031\036\032\045\033" +
    "\042\034\040\035\044\001\002\000\014\015\ufff7\016\ufff7" +
    "\017\ufff7\022\ufff7\037\ufff7\001\002\000\022\002\ufffd\015" +
    "\ufffd\016\ufffd\017\ufffd\020\ufffd\022\ufffd\037\ufffd\040\ufffd" +
    "\001\002\000\016\015\016\016\007\017\015\022\014\037" +
    "\006\040\105\001\002\000\016\015\ufff3\016\ufff3\017\ufff3" +
    "\022\ufff3\037\ufff3\040\ufff3\001\002\000\022\002\ufff8\015" +
    "\ufff8\016\ufff8\017\ufff8\020\ufff8\022\ufff8\037\ufff8\040\ufff8" +
    "\001\002\000\016\015\ufff2\016\ufff2\017\ufff2\022\ufff2\037" +
    "\ufff2\040\ufff2\001\002\000\014\015\016\016\007\017\015" +
    "\022\014\037\006\001\002\000\022\002\ufff4\015\ufff4\016" +
    "\ufff4\017\ufff4\020\ufff4\022\ufff4\037\ufff4\040\ufff4\001\002" +
    "\000\022\002\ufffa\015\ufffa\016\ufffa\017\ufffa\020\112\022" +
    "\ufffa\037\ufffa\040\ufffa\001\002\000\014\015\016\016\007" +
    "\017\015\022\014\037\006\001\002\000\022\002\ufff4\015" +
    "\ufff4\016\ufff4\017\ufff4\020\ufff4\022\ufff4\037\ufff4\040\ufff4" +
    "\001\002\000\022\002\ufff9\015\ufff9\016\ufff9\017\ufff9\020" +
    "\ufff9\022\ufff9\037\ufff9\040\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\004\002\003\001\001\000\012\003\007\005" +
    "\010\007\004\010\011\001\001\000\004\012\106\001\001" +
    "\000\014\003\007\005\103\006\102\007\004\010\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\017\004\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\017\004" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\017\004\066\001\001\000\002\001" +
    "\001\000\006\003\017\004\027\001\001\000\002\001\001" +
    "\000\006\003\017\004\062\001\001\000\006\003\017\004" +
    "\061\001\001\000\002\001\001\000\006\003\017\004\060" +
    "\001\001\000\006\003\017\004\057\001\001\000\006\003" +
    "\017\004\056\001\001\000\006\003\017\004\055\001\001" +
    "\000\006\003\017\004\054\001\001\000\006\003\017\004" +
    "\053\001\001\000\006\003\017\004\052\001\001\000\006" +
    "\003\017\004\051\001\001\000\006\003\017\004\050\001" +
    "\001\000\006\003\017\004\047\001\001\000\006\003\017" +
    "\004\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\017\004\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\017\004\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\017\004\077\001\001" +
    "\000\012\003\007\005\075\007\004\010\011\001\001\000" +
    "\004\011\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\007\005" +
    "\105\007\004\010\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\007\005\107\007" +
    "\004\010\011\001\001\000\004\011\110\001\001\000\002" +
    "\001\001\000\012\003\007\005\112\007\004\010\011\001" +
    "\001\000\004\011\113\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    Main interfaz;
    Float variables[] = new Float[26];
    MaquinaHoc5 maquinaHoc5;

    public void report_error(String mensaje, Object info) {
        StringBuilder m = new StringBuilder("Error");

        if(info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;

            if(s.left >= 0) {
                m.append(" en la línea " + (s.left+1));
                
                if(s.right >= 0) {
                    m.append(", columna " + (s.right+1));
                }
            }
        }
        
        m.append(": " + mensaje);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // list ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("list",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // list ::= list stmt 
            {
              Object RESULT =null;
		 
                                                /*InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.PRINT;

                                                InstrucPrograma inst2 = new InstrucPrograma();
                                                inst2.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst2.Instruc = EnumInstrMaq.STOP;

                                                maquinaHoc5.code(inst1);*/
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("list",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // asgn ::= VAR OpAsig expr 
            {
              Integer RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		SymbolHoc v = (SymbolHoc)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.VARPUSH;

                                                InstrucPrograma inst2 = new InstrucPrograma();
                                                inst2.TipInstr = EnumTipoInstr.SYMBOL;
                                                inst2.symbolHoc = v;
                                                
                                                InstrucPrograma inst3 = new InstrucPrograma();
                                                inst3.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst3.Instruc = EnumInstrMaq.ASSIGN;

                                                maquinaHoc5.code3(inst1, inst2, inst3);
                                                RESULT = ind1;
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asgn",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= asgn SEMIC 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                                                RESULT = ind1;
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= PRINT expr SEMIC 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.PRINT;
                                                
                                                maquinaHoc5.code(inst1);
                                                RESULT = ind1;
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= while cond stmt end 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int ind2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ind2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer ind2 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int ind3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int ind3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Integer ind3 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ind4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ind4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer ind4 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.JUMP;
                                                inst1.jump = ind3;

                                                maquinaHoc5.Prog[ind1+1] = inst1;

                                                InstrucPrograma inst2 = new InstrucPrograma();
                                                inst2.TipInstr = EnumTipoInstr.JUMP;
                                                inst2.jump = ind4;

                                                maquinaHoc5.Prog[ind1+2] = inst2;

                                                RESULT = ind1;
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= if cond stmt end 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int ind2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ind2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer ind2 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int ind3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int ind3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Integer ind3 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ind4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ind4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer ind4 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.JUMP;
                                                inst1.jump = ind3;

                                                maquinaHoc5.Prog[ind1+1] = inst1;

                                                InstrucPrograma inst2 = new InstrucPrograma();
                                                inst2.TipInstr = EnumTipoInstr.JUMP;
                                                inst2.jump = ind4;

                                                maquinaHoc5.Prog[ind1+3] = inst2;

                                                RESULT = ind1;
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= if cond stmt end ELSE stmt end 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int ind2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int ind2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Integer ind2 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int ind3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int ind3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Integer ind3 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int ind4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ind4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Integer ind4 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int ind6left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int ind6right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Integer ind6 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ind7left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ind7right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer ind7 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.JUMP;
                                                inst1.jump = ind3;

                                                maquinaHoc5.Prog[ind1+1] = inst1;

                                                InstrucPrograma inst2 = new InstrucPrograma();
                                                inst2.TipInstr = EnumTipoInstr.JUMP;
                                                inst2.jump = ind6;

                                                maquinaHoc5.Prog[ind1+2] = inst2;

                                                InstrucPrograma inst3 = new InstrucPrograma();
                                                inst3.TipInstr = EnumTipoInstr.JUMP;
                                                inst3.jump = ind7;

                                                maquinaHoc5.Prog[ind1+3] = inst3;

                                                RESULT = ind1;
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= LLAVE_IZQ stmtlist LLAVE_DER 
            {
              Integer RESULT =null;
		int indleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int indright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Integer ind = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = ind; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cond ::= ParIzq expr ParDer 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.STOP;
                                                maquinaHoc5.code(inst1);

                                                RESULT = ind1;
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cond",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // while ::= WHILE 
            {
              Integer RESULT =null;
		
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.WHILECODE;

                                                InstrucPrograma inst2 = new InstrucPrograma();
                                                inst2.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst2.Instruc = EnumInstrMaq.STOP;
                                                
                                                InstrucPrograma inst3 = new InstrucPrograma();
                                                inst3.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst3.Instruc = EnumInstrMaq.STOP;

                                                RESULT = maquinaHoc5.code3(inst1, inst2, inst3);
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // if ::= IF 
            {
              Integer RESULT =null;
		
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.IFCODE;

                                                RESULT = maquinaHoc5.code(inst1);

                                                InstrucPrograma inst2 = new InstrucPrograma();
                                                inst2.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst2.Instruc = EnumInstrMaq.STOP;
                                                
                                                InstrucPrograma inst3 = new InstrucPrograma();
                                                inst3.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst3.Instruc = EnumInstrMaq.STOP;

                                                InstrucPrograma inst4 = new InstrucPrograma();
                                                inst4.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst4.Instruc = EnumInstrMaq.STOP;

                                                maquinaHoc5.code3(inst2, inst3, inst4);
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // end ::= 
            {
              Integer RESULT =null;
		
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.STOP;

                                                maquinaHoc5.code(inst1);

                                                RESULT = maquinaHoc5.progp;
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("end",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmtlist ::= stmt 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = ind1; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("stmtlist",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmtlist ::= stmtlist stmt 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = ind1; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("stmtlist",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= NUM 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		SymbolHoc n = (SymbolHoc)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.CONSTPUSH;

                                                InstrucPrograma inst2 = new InstrucPrograma();
                                                inst2.TipInstr = EnumTipoInstr.SYMBOL;
                                                inst2.symbolHoc = n;

                                                RESULT = maquinaHoc5.code2(inst1, inst2);
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= VAR 
            {
              Integer RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		SymbolHoc v = (SymbolHoc)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.VARPUSH;

                                                InstrucPrograma inst2 = new InstrucPrograma();
                                                inst2.TipInstr = EnumTipoInstr.SYMBOL;
                                                inst2.symbolHoc = v;

                                                InstrucPrograma inst3 = new InstrucPrograma();
                                                inst3.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst3.Instruc = EnumInstrMaq.EVAL;

                                                RESULT = maquinaHoc5.code3(inst1, inst2, inst3);
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= CONST_PRED 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		SymbolHoc n = (SymbolHoc)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.CONSTPUSH;

                                                InstrucPrograma inst2 = new InstrucPrograma();
                                                inst2.TipInstr = EnumTipoInstr.SYMBOL;
                                                inst2.symbolHoc = n;

                                                RESULT = maquinaHoc5.code2(inst1, inst2);
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= asgn 
            {
              Integer RESULT =null;
		int indleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int indright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer ind = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = ind; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= expr OpSuma expr 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.ADD;
                                                maquinaHoc5.code(inst1);
                                                RESULT = ind1;
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr OpResta expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.SUB;
                                                maquinaHoc5.code(inst1);
                                                RESULT = e1;
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr OpProd expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.MUL;
                                                maquinaHoc5.code(inst1);
                                                RESULT = e1;
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr OpDiv expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.DIV;
                                                maquinaHoc5.code(inst1);
                                                RESULT = e1;
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= ParIzq expr ParDer 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= BLTIN ParIzq expr ParDer 
            {
              Integer RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		SymbolHoc v = (SymbolHoc)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.BLTIN;

                                                InstrucPrograma inst2 = new InstrucPrograma();
                                                inst2.TipInstr = EnumTipoInstr.BLTIN;
                                                inst2.Func_BLTIN = v.FuncPredef;

                                                maquinaHoc5.code2(inst1, inst2);
                                                RESULT = ind1;
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= OpResta expr 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.NEGATE;
                                                maquinaHoc5.code(inst1);
                                                RESULT = ind1;
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr OpExp expr 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.POWER;
                                                maquinaHoc5.code(inst1);
                                                RESULT = ind1;
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr GT expr 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.GT;
                                                maquinaHoc5.code(inst1);
                                                RESULT = ind1;
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr GE expr 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.GE;
                                                maquinaHoc5.code(inst1);
                                                RESULT = ind1;
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr LT expr 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.LT;
                                                maquinaHoc5.code(inst1);
                                                RESULT = ind1;
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr LE expr 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.LE;
                                                maquinaHoc5.code(inst1);
                                                RESULT = ind1;
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr EQ expr 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.EQ;
                                                maquinaHoc5.code(inst1);
                                                RESULT = ind1;
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr NE expr 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.NE;
                                                maquinaHoc5.code(inst1);
                                                RESULT = ind1;
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr AND expr 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.AND;
                                                maquinaHoc5.code(inst1);
                                                RESULT = ind1;
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= expr OR expr 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.OR;
                                                maquinaHoc5.code(inst1);
                                                RESULT = ind1;
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= NOT expr 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.NOT;
                                                maquinaHoc5.code(inst1);
                                                RESULT = ind1;
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
