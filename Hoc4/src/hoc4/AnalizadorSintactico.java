
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

package hoc4;

import java_cup.runtime.*;
import java.io.FileReader;
import java.lang.Math;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return AnalizadorSintacticoSym.class;
}

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\021\000\002\002\002\000\002\002\004\000\002\002" +
    "\003\000\002\002\005\000\002\003\005\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\006\000\002\004" +
    "\004\000\002\004\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\037\000\022\002\001\005\001\012\001\014\004\015" +
    "\001\016\001\017\001\020\001\001\002\000\020\002\uffff" +
    "\005\uffff\012\uffff\015\uffff\016\uffff\017\uffff\020\uffff\001" +
    "\002\000\020\002\012\005\010\012\016\015\006\016\013" +
    "\017\011\020\015\001\002\000\020\004\ufffc\005\ufffc\006" +
    "\ufffc\007\ufffc\011\ufffc\013\ufffc\014\ufffc\001\002\000\020" +
    "\004\ufff9\005\ufff9\006\ufff9\007\ufff9\011\ufff9\013\ufff9\014" +
    "\ufff9\001\002\000\016\005\010\012\016\015\006\016\013" +
    "\017\011\020\015\001\002\000\020\004\ufffa\005\ufffa\006" +
    "\ufffa\007\ufffa\011\ufffa\013\ufffa\014\ufffa\001\002\000\004" +
    "\002\000\001\002\000\022\004\ufffb\005\ufffb\006\ufffb\007" +
    "\ufffb\010\037\011\ufffb\013\ufffb\014\ufffb\001\002\000\016" +
    "\004\023\005\024\006\022\007\021\011\020\014\036\001" +
    "\002\000\004\012\033\001\002\000\016\005\010\012\016" +
    "\015\006\016\013\017\011\020\015\001\002\000\016\004" +
    "\023\005\024\006\022\007\021\011\020\013\025\001\002" +
    "\000\016\005\010\012\016\015\006\016\013\017\011\020" +
    "\015\001\002\000\016\005\010\012\016\015\006\016\013" +
    "\017\011\020\015\001\002\000\016\005\010\012\016\015" +
    "\006\016\013\017\011\020\015\001\002\000\016\005\010" +
    "\012\016\015\006\016\013\017\011\020\015\001\002\000" +
    "\016\005\010\012\016\015\006\016\013\017\011\020\015" +
    "\001\002\000\020\004\ufff4\005\ufff4\006\ufff4\007\ufff4\011" +
    "\ufff4\013\ufff4\014\ufff4\001\002\000\020\004\ufff7\005\ufff7" +
    "\006\022\007\021\011\020\013\ufff7\014\ufff7\001\002\000" +
    "\020\004\ufff8\005\ufff8\006\022\007\021\011\020\013\ufff8" +
    "\014\ufff8\001\002\000\020\004\ufff6\005\ufff6\006\ufff6\007" +
    "\ufff6\011\020\013\ufff6\014\ufff6\001\002\000\020\004\ufff5" +
    "\005\ufff5\006\ufff5\007\ufff5\011\020\013\ufff5\014\ufff5\001" +
    "\002\000\020\004\ufff1\005\ufff1\006\ufff1\007\ufff1\011\ufff1" +
    "\013\ufff1\014\ufff1\001\002\000\016\005\010\012\016\015" +
    "\006\016\013\017\011\020\015\001\002\000\016\004\023" +
    "\005\024\006\022\007\021\011\020\013\035\001\002\000" +
    "\020\004\ufff3\005\ufff3\006\ufff3\007\ufff3\011\ufff3\013\ufff3" +
    "\014\ufff3\001\002\000\020\002\ufffe\005\ufffe\012\ufffe\015" +
    "\ufffe\016\ufffe\017\ufffe\020\ufffe\001\002\000\016\005\010" +
    "\012\016\015\006\016\013\017\011\020\015\001\002\000" +
    "\020\004\023\005\024\006\022\007\021\011\020\013\ufffd" +
    "\014\ufffd\001\002\000\020\004\ufff2\005\ufff2\006\ufff2\007" +
    "\ufff2\011\ufff2\013\ufff2\014\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\037\000\004\002\004\001\001\000\002\001\001\000" +
    "\006\003\006\004\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\006\004\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\006\004\016\001\001\000" +
    "\002\001\001\000\006\003\006\004\031\001\001\000\006" +
    "\003\006\004\030\001\001\000\006\003\006\004\027\001" +
    "\001\000\006\003\006\004\026\001\001\000\006\003\006" +
    "\004\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\006\004\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\006" +
    "\004\037\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    Main interfaz;
    Float variables[] = new Float[26];
    MaquinaHoc4 maquinaHoc4;

    public void report_error(String mensaje, Object info) {
        StringBuilder m = new StringBuilder("Error");

        if(info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;

            if(s.left >= 0) {
                m.append(" en la lÃ­nea " + (s.left+1));
                
                if(s.right >= 0) {
                    m.append(", columna " + (s.right+1));
                }
            }
        }
        
        m.append(": " + mensaje);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // list ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("list",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // list ::= Enter 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("list",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // list ::= list expr Enter 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.PRINT;

                                                /*InstrucPrograma inst2 = new InstrucPrograma();
                                                inst2.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst2.Instruc = EnumInstrMaq.STOP;*/

                                                maquinaHoc4.code(inst1);
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("list",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // asgn ::= VAR OpAsig expr 
            {
              Integer RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		SymbolHoc v = (SymbolHoc)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.VARPUSH;

                                                InstrucPrograma inst2 = new InstrucPrograma();
                                                inst2.TipInstr = EnumTipoInstr.SYMBOL;
                                                inst2.symbolHoc = v;
                                                
                                                InstrucPrograma inst3 = new InstrucPrograma();
                                                inst3.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst3.Instruc = EnumInstrMaq.ASSIGN;

                                                RESULT = maquinaHoc4.code3(inst1, inst2, inst3);
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asgn",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= NUM 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		SymbolHoc n = (SymbolHoc)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.CONSTPUSH;

                                                InstrucPrograma inst2 = new InstrucPrograma();
                                                inst2.TipInstr = EnumTipoInstr.SYMBOL;
                                                inst2.symbolHoc = n;

                                                RESULT = maquinaHoc4.code2(inst1, inst2);
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= VAR 
            {
              Integer RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		SymbolHoc v = (SymbolHoc)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.VARPUSH;

                                                InstrucPrograma inst2 = new InstrucPrograma();
                                                inst2.TipInstr = EnumTipoInstr.SYMBOL;
                                                inst2.symbolHoc = v;

                                                InstrucPrograma inst3 = new InstrucPrograma();
                                                inst3.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst3.Instruc = EnumInstrMaq.EVAL;

                                                RESULT = maquinaHoc4.code3(inst1, inst2, inst3);
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= CONST_PRED 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		SymbolHoc n = (SymbolHoc)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.CONSTPUSH;

                                                InstrucPrograma inst2 = new InstrucPrograma();
                                                inst2.TipInstr = EnumTipoInstr.SYMBOL;
                                                inst2.symbolHoc = n;

                                                RESULT = maquinaHoc4.code2(inst1, inst2);
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= asgn 
            {
              Integer RESULT =null;
		int indleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int indright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer ind = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = ind; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= expr OpSuma expr 
            {
              Integer RESULT =null;
		 
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.ADD;
                                                RESULT = maquinaHoc4.code(inst1);
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= expr OpResta expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.SUB;
                                                RESULT = maquinaHoc4.code(inst1);
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr OpProd expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.MUL;
                                                RESULT = maquinaHoc4.code(inst1);
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr OpDiv expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.DIV;
                                                RESULT = maquinaHoc4.code(inst1);
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= ParIzq expr ParDer 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= BLTIN ParIzq expr ParDer 
            {
              Integer RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		SymbolHoc v = (SymbolHoc)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		 
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.BLTIN;

                                                InstrucPrograma inst2 = new InstrucPrograma();
                                                inst2.TipInstr = EnumTipoInstr.BLTIN;
                                                inst2.Func_BLTIN = v.FuncPredef;

                                                RESULT = maquinaHoc4.code2(inst1, inst2);
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= OpResta expr 
            {
              Integer RESULT =null;
		 
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.NEGATE;
                                                RESULT = maquinaHoc4.code(inst1);
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr OpExp expr 
            {
              Integer RESULT =null;
		
                                                InstrucPrograma inst1 = new InstrucPrograma();
                                                inst1.TipInstr = EnumTipoInstr.INSTRUC;
                                                inst1.Instruc = EnumInstrMaq.POWER;
                                                RESULT = maquinaHoc4.code(inst1);
                                             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
